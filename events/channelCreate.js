const { Events, AuditLogEvent, EmbedBuilder } = require('discord.js');
const fs = require('fs').promises;
const path = require('path');

// Chemin vers le fichier de configuration
const configPath = path.join(__dirname, '..', 'config', 'antichannel.json');

// Fonction pour lire la configuration
async function readConfig() {
    try {
        const data = await fs.readFile(configPath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('Erreur lors de la lecture de la configuration:', error);
        return {
            utilisateursAutorises: [
                "1348237994749984808",
                "1302614774089121875"
            ]
        };
    }
}

module.exports = {
    name: Events.ChannelCreate,
    async execute(channel) {
        // Ignore les canaux DM
        if (!channel.guild) return;

        // Configuration
        const CANAL_LOG_ID = '1358721532339290174';

        console.log(`üìù Nouveau canal cr√©√©: ${channel.name}`);

        try {
            // R√©cup√®re les logs d'audit
            const auditLogs = await channel.guild.fetchAuditLogs({
                type: AuditLogEvent.ChannelCreate,
                limit: 1,
            });

            const channelLog = auditLogs.entries.first();

            if (!channelLog) {
                console.log('‚ùå Aucun log d\'audit trouv√©');
                return;
            }

            console.log(`üîç Log d'audit trouv√© - Ex√©cutant: ${channelLog.executor.tag}`);

            // V√©rifie si le log correspond au bon canal
            if (channelLog.target.id !== channel.id) {
                console.log('‚ùå Le log ne correspond pas au canal cr√©√©');
                return;
            }

            // V√©rifie si le log n'est pas trop ancien (30 secondes)
            if (channelLog.createdAt < (Date.now() - 30000)) {
                console.log(`‚ùå Log trop ancien (${Math.floor((Date.now() - channelLog.createdAt) / 1000)} secondes)`);
                return;
            }

            // V√©rification pour les bots
            if (channelLog.executor.bot) {
                console.log('ü§ñ Ex√©cutant est un bot - Action ignor√©e');
                return;
            }

            // Charge la configuration
            const config = await readConfig();
            console.log('üë• Utilisateurs autoris√©s:', config.utilisateursAutorises);

            // V√©rification des utilisateurs autoris√©s
            if (config.utilisateursAutorises.includes(channelLog.executor.id)) {
                console.log('‚úÖ Utilisateur autoris√© - Action permise');
                return;
            }

            console.log('‚ö†Ô∏è Utilisateur non autoris√© d√©tect√©');

            // Supprime le canal
            await channel.delete('Protection anti-cr√©ation de canal');
            console.log('‚úÖ Canal supprim√©');

            // Message √† l'ex√©cutant
            try {
                await channelLog.executor.send({
                    content: `‚ö†Ô∏è Vous n'√™tes pas autoris√© √† cr√©er des canaux sur le serveur. Le canal \`${channel.name}\` a √©t√© supprim√©.`
                });
                console.log('‚úÖ Message envoy√© √† l\'ex√©cutant');
            } catch (error) {
                console.error('‚ùå Impossible d\'envoyer un message √† l\'ex√©cutant:', error);
            }

            // Log dans le canal
            const logChannel = channel.guild.channels.cache.get(CANAL_LOG_ID);
            if (logChannel) {
                try {
                    const embed = new EmbedBuilder()
                        .setColor(0xFF0000)
                        .setTitle('üõ°Ô∏è Protection Anti-Cr√©ation de Canal')
                        .setDescription(`Une tentative non autoris√©e de cr√©ation de canal a √©t√© d√©tect√©e et bloqu√©e.`)
                        .addFields(
                            { name: 'Ex√©cutant', value: `${channelLog.executor.tag} (${channelLog.executor.id})`, inline: true },
                            { name: 'Canal', value: `${channel.name} (${channel.id})`, inline: true },
                            { name: 'Type', value: channel.type.toString(), inline: true },
                            { name: 'Action prise', value: 'Le canal a √©t√© supprim√©' }
                        )
                        .setTimestamp()
                        .setFooter({ text: 'Protection Anti-Cr√©ation de Canal' });

                    await logChannel.send({ embeds: [embed] });
                    console.log('‚úÖ Embed de log envoy√© dans le canal');
                } catch (error) {
                    console.error('‚ùå Erreur lors de l\'envoi du log dans le canal:', error);
                }
            } else {
                console.error('‚ùå Canal de logs non trouv√©');
            }

        } catch (error) {
            console.error('‚ùå Erreur g√©n√©rale de la protection anti-cr√©ation de canal:', error);
        }
    },
};